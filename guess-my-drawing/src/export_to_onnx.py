#!/usr/bin/env python3
"""
Export du mod√®le PyTorch vers ONNX
Convertit le mod√®le .pth en .onnx pour d√©ploiement l√©ger
"""

import torch
from model import DrawingCNN
from pathlib import Path

def export_model():
    """Exporte le mod√®le PyTorch vers ONNX"""
    
    print("üîÑ EXPORT PYTORCH ‚Üí ONNX")
    print("=" * 40)
    
    # V√©rifier que le mod√®le .pth existe
    model_path = Path("../models/best_model_20250701_170421.pth")
    if not model_path.exists():
        print("‚ùå Mod√®le PyTorch non trouv√©!")
        print(f"   Cherch√©: {model_path}")
        return False
    
    try:
        # Charger le mod√®le PyTorch
        print(f"üì¶ Chargement: {model_path}")
        checkpoint = torch.load(model_path, map_location='cpu')
        
        # Cr√©er le mod√®le
        model = DrawingCNN(num_classes=4)
        model.load_state_dict(checkpoint['model_state_dict'])
        model.eval()
        
        print(f"‚úÖ Mod√®le charg√©: 4 classes")
        
        # Input factice (m√™me format que l'entra√Ænement)
        dummy_input = torch.randn(1, 1, 28, 28)
        
        # Export ONNX
        onnx_path = "../models/guess_my_drawing.onnx"
        print(f"üîÑ Export vers: {onnx_path}")
        
        torch.onnx.export(
            model,                           # Le mod√®le
            dummy_input,                     # Input exemple
            onnx_path,                       # Fichier de sortie
            input_names=['input'],           # Nom input
            output_names=['output'],         # Nom output
            dynamic_axes={                   # Batch size dynamique
                'input': {0: 'batch_size'}, 
                'output': {0: 'batch_size'}
            },
            opset_version=11                 # Version ONNX
        )
        
        # V√©rifier que le fichier a √©t√© cr√©√©
        onnx_file = Path(onnx_path)
        if onnx_file.exists():
            size_mb = onnx_file.stat().st_size / (1024 * 1024)
            print(f"‚úÖ Export r√©ussi!")
            print(f"   Fichier: {onnx_path}")
            print(f"   Taille: {size_mb:.1f} MB")
            print(f"   Format: ONNX v11")
            return True
        else:
            print("‚ùå Export √©chou√© - fichier non cr√©√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur export: {e}")
        return False

if __name__ == "__main__":
    success = export_model()
    if success:
        print("\nüéâ Pr√™t pour d√©ploiement ONNX Runtime!")
    else:
        print("\nüí• Export √©chou√©")